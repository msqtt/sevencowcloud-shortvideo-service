// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: tags.sql

package db

import (
	"context"
)

const addPostTag = `-- name: AddPostTag :exec
INSERT INTO post_tag (
	post_id, tag_id	
) VALUES ( 
	?, ?
)
`

type AddPostTagParams struct {
	PostID int64 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) AddPostTag(ctx context.Context, arg AddPostTagParams) error {
	_, err := q.db.ExecContext(ctx, addPostTag, arg.PostID, arg.TagID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM post_tag
	WHERE post_id = ?
AND tag_id = ?
`

type DeleteTagParams struct {
	PostID int64 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteTag, arg.PostID, arg.TagID)
	return err
}

const getAllTags = `-- name: GetAllTags :many
SELECT id, name, description, is_enabled FROM tags
WHERE is_enabled = 1
`

func (q *Queries) GetAllTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagByID = `-- name: GetTagByID :one
SELECT id, name, description, is_enabled FROM tags
WHERE id = ?
AND is_enabled = 1
`

func (q *Queries) GetTagByID(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsEnabled,
	)
	return i, err
}

const getTagsByPostID = `-- name: GetTagsByPostID :many
SELECT t.id, t.name, t.description  FROM tags t
join post_tag pt on pt.tag_id  = t.id
WHERE pt.post_id = ?
`

type GetTagsByPostIDRow struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) GetTagsByPostID(ctx context.Context, postID int64) ([]GetTagsByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagsByPostIDRow{}
	for rows.Next() {
		var i GetTagsByPostIDRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPostByTag = `-- name: SearchPostByTag :many
SELECT id FROM tags
WHERE tag_content like concat("%", ?,"%")
`

func (q *Queries) SearchPostByTag(ctx context.Context, concat interface{}) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, searchPostByTag, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
