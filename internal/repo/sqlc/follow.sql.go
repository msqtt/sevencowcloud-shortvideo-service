// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: follow.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addFollow = `-- name: AddFollow :execresult
INSERT INTO follows (
	following_user_id, followed_user_id, followed_at
) VALUES ( ?, ?, now() )
`

type AddFollowParams struct {
	FollowingUserID int64 `json:"following_user_id"`
	FollowedUserID  int64 `json:"followed_user_id"`
}

func (q *Queries) AddFollow(ctx context.Context, arg AddFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addFollow, arg.FollowingUserID, arg.FollowedUserID)
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows
	WHERE following_user_id = ?
	AND followed_user_id = ?
`

type DeleteFollowParams struct {
	FollowingUserID int64 `json:"following_user_id"`
	FollowedUserID  int64 `json:"followed_user_id"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.FollowingUserID, arg.FollowedUserID)
	return err
}

const getFollow = `-- name: GetFollow :one
SELECT following_user_id, followed_user_id, followed_at FROM follows
WHERE following_user_id = ?
AND followed_user_id = ?
LIMIT 1
`

type GetFollowParams struct {
	FollowingUserID int64 `json:"following_user_id"`
	FollowedUserID  int64 `json:"followed_user_id"`
}

func (q *Queries) GetFollow(ctx context.Context, arg GetFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, getFollow, arg.FollowingUserID, arg.FollowedUserID)
	var i Follow
	err := row.Scan(&i.FollowingUserID, &i.FollowedUserID, &i.FollowedAt)
	return i, err
}

const getFollowedList = `-- name: GetFollowedList :many
SELECT followed_at, u.id, u.nickname, u.email, u.created_at, p.real_name, p.mood, p.gender,
	p.birth_date, p.introduction, p.avatar_link
from follows f 
join users u on id = following_user_id 
join profiles p on u.profile_id = p.id 
WHERE followed_user_id = ?
`

type GetFollowedListRow struct {
	FollowedAt   time.Time          `json:"followed_at"`
	ID           int64              `json:"id"`
	Nickname     string             `json:"nickname"`
	Email        string             `json:"email"`
	CreatedAt    time.Time          `json:"created_at"`
	RealName     sql.NullString     `json:"real_name"`
	Mood         sql.NullString     `json:"mood"`
	Gender       NullProfilesGender `json:"gender"`
	BirthDate    sql.NullTime       `json:"birth_date"`
	Introduction sql.NullString     `json:"introduction"`
	AvatarLink   sql.NullString     `json:"avatar_link"`
}

func (q *Queries) GetFollowedList(ctx context.Context, followedUserID int64) ([]GetFollowedListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedList, followedUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowedListRow{}
	for rows.Next() {
		var i GetFollowedListRow
		if err := rows.Scan(
			&i.FollowedAt,
			&i.ID,
			&i.Nickname,
			&i.Email,
			&i.CreatedAt,
			&i.RealName,
			&i.Mood,
			&i.Gender,
			&i.BirthDate,
			&i.Introduction,
			&i.AvatarLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingList = `-- name: GetFollowingList :many
SELECT followed_at, u.id, u.nickname, u.email, u.created_at, p.real_name, p.mood, p.gender,
	p.birth_date, p.introduction, p.avatar_link
from follows f 
join users u on id = followed_user_id 
join profiles p on u.profile_id = p.id 
WHERE following_user_id = ?
`

type GetFollowingListRow struct {
	FollowedAt   time.Time          `json:"followed_at"`
	ID           int64              `json:"id"`
	Nickname     string             `json:"nickname"`
	Email        string             `json:"email"`
	CreatedAt    time.Time          `json:"created_at"`
	RealName     sql.NullString     `json:"real_name"`
	Mood         sql.NullString     `json:"mood"`
	Gender       NullProfilesGender `json:"gender"`
	BirthDate    sql.NullTime       `json:"birth_date"`
	Introduction sql.NullString     `json:"introduction"`
	AvatarLink   sql.NullString     `json:"avatar_link"`
}

func (q *Queries) GetFollowingList(ctx context.Context, followingUserID int64) ([]GetFollowingListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingList, followingUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowingListRow{}
	for rows.Next() {
		var i GetFollowingListRow
		if err := rows.Scan(
			&i.FollowedAt,
			&i.ID,
			&i.Nickname,
			&i.Email,
			&i.CreatedAt,
			&i.RealName,
			&i.Mood,
			&i.Gender,
			&i.BirthDate,
			&i.Introduction,
			&i.AvatarLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
