// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: video.sql

package db

import (
	"context"
	"database/sql"
)

const addVideo = `-- name: AddVideo :execresult
INSERT INTO videos (
	content_hash, updated_at, cover_link, src_link	
) VALUES ( ?, now(), ?, ? )
`

type AddVideoParams struct {
	ContentHash string `json:"content_hash"`
	CoverLink   string `json:"cover_link"`
	SrcLink     string `json:"src_link"`
}

func (q *Queries) AddVideo(ctx context.Context, arg AddVideoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addVideo, arg.ContentHash, arg.CoverLink, arg.SrcLink)
}

const getVideoByID = `-- name: GetVideoByID :one
SELECT id, cover_link, src_link, updated_at, content_hash FROM videos
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetVideoByID(ctx context.Context, id int64) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoByID, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.CoverLink,
		&i.SrcLink,
		&i.UpdatedAt,
		&i.ContentHash,
	)
	return i, err
}

const updateVideoLink = `-- name: UpdateVideoLink :exec
UPDATE videos
	SET cover_link = ?, src_link = ?, updated_at = now()
	WHERE id = ?
`

type UpdateVideoLinkParams struct {
	CoverLink string `json:"cover_link"`
	SrcLink   string `json:"src_link"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateVideoLink(ctx context.Context, arg UpdateVideoLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateVideoLink, arg.CoverLink, arg.SrcLink, arg.ID)
	return err
}
