// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user_activation.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
	SET is_activated = 1
	WHERE id = ?
`

func (q *Queries) ActivateUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, activateUser, id)
	return err
}

const addActivation = `-- name: AddActivation :execresult
INSERT INTO user_activation (
	user_id, activate_code, expired_at
) VALUES ( ?, ?, ? )
`

type AddActivationParams struct {
	UserID       int64     `json:"user_id"`
	ActivateCode string    `json:"activate_code"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) AddActivation(ctx context.Context, arg AddActivationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addActivation, arg.UserID, arg.ActivateCode, arg.ExpiredAt)
}

const deleteActivation = `-- name: DeleteActivation :exec
UPDATE user_activation
	SET is_deleted = 1
	WHERE id = ?
`

func (q *Queries) DeleteActivation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActivation, id)
	return err
}

const getActivationByID = `-- name: GetActivationByID :one
SELECT id, user_id, activate_code, is_deleted, expired_at FROM user_activation
	WHERE id = ?
	AND is_deleted = 0
	LIMIT 1
`

func (q *Queries) GetActivationByID(ctx context.Context, id int64) (UserActivation, error) {
	row := q.db.QueryRowContext(ctx, getActivationByID, id)
	var i UserActivation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivateCode,
		&i.IsDeleted,
		&i.ExpiredAt,
	)
	return i, err
}

const getActivationByUserIDAndCode = `-- name: GetActivationByUserIDAndCode :one
SELECT id, user_id, activate_code, is_deleted, expired_at FROM user_activation
	WHERE user_id = ?
	AND activate_code = ?
	AND is_deleted = 0
	LIMIT 1
`

type GetActivationByUserIDAndCodeParams struct {
	UserID       int64  `json:"user_id"`
	ActivateCode string `json:"activate_code"`
}

func (q *Queries) GetActivationByUserIDAndCode(ctx context.Context, arg GetActivationByUserIDAndCodeParams) (UserActivation, error) {
	row := q.db.QueryRowContext(ctx, getActivationByUserIDAndCode, arg.UserID, arg.ActivateCode)
	var i UserActivation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivateCode,
		&i.IsDeleted,
		&i.ExpiredAt,
	)
	return i, err
}

const todayActiationCount = `-- name: TodayActiationCount :one
SELECT COUNT(id) FROM user_activation 
WHERE user_id = ?
AND TO_DAYS(expired_at) = TO_DAYS(NOW())
`

func (q *Queries) TodayActiationCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, todayActiationCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
