// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: profile.sql

package db

import (
	"context"
	"database/sql"
)

const addProfile = `-- name: AddProfile :execresult
INSERT INTO profiles (
	real_name, mood, gender, birth_date, introduction
) VALUES ( ?, ?, ?, ?, ? )
`

type AddProfileParams struct {
	RealName     sql.NullString     `json:"real_name"`
	Mood         sql.NullString     `json:"mood"`
	Gender       NullProfilesGender `json:"gender"`
	BirthDate    sql.NullTime       `json:"birth_date"`
	Introduction sql.NullString     `json:"introduction"`
}

func (q *Queries) AddProfile(ctx context.Context, arg AddProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addProfile,
		arg.RealName,
		arg.Mood,
		arg.Gender,
		arg.BirthDate,
		arg.Introduction,
	)
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
	WHERE id = ?
`

func (q *Queries) DeleteProfile(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT id, real_name, mood, gender, birth_date, introduction, updated_at FROM profiles
WHERE id = ?
`

func (q *Queries) GetProfile(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.RealName,
		&i.Mood,
		&i.Gender,
		&i.BirthDate,
		&i.Introduction,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :execresult
UPDATE profiles
	SET real_name = ?,
			mood = ?,
			gender = ?,
			birth_date = ?,
			introduction = ?,
			updated_at = now()
	WHERE condition
`

type UpdateProfileParams struct {
	RealName     sql.NullString     `json:"real_name"`
	Mood         sql.NullString     `json:"mood"`
	Gender       NullProfilesGender `json:"gender"`
	BirthDate    sql.NullTime       `json:"birth_date"`
	Introduction sql.NullString     `json:"introduction"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProfile,
		arg.RealName,
		arg.Mood,
		arg.Gender,
		arg.BirthDate,
		arg.Introduction,
	)
}
